version: '3.8'
services:

  tool-manager:
    build: ./tool-manager
    environment:
      - TOOL_MANAGER_REST_PORT=${TOOL_MANAGER_REST_PORT}
      - ACTUATOR_ENDPOINTS=${ACTUATOR_ENDPOINTS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOSTNAME=${POSTGRES_HOSTNAME}
    ports:
      - ${TOOL_MANAGER_REST_PORT}:${TOOL_MANAGER_REST_PORT}

  qa-tool:
    build: ./qa-tool
    environment:
      - QA_TOOL_REST_PORT=${QA_TOOL_REST_PORT}
      - TOOL_MANAGER_REST_URL=${TOOL_MANAGER_REST_URL}
      - ACTUATOR_ENDPOINTS=${ACTUATOR_ENDPOINTS}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_SQS_ENDPOINT=${AWS_SQS_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOSTNAME=${POSTGRES_HOSTNAME}
    ports:
      - ${QA_TOOL_REST_PORT}:${QA_TOOL_REST_PORT}

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./dev-config/postgresql/init:/docker-entrypoint-initdb.d

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - http.port=${ELASTICSEARCH_PORT}
    ports:
      - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:${ELASTICSEARCH_PORT}
      SERVER_PORT: ${KIBANA_PORT}
    ports:
       - ${KIBANA_PORT}:${KIBANA_PORT}

  sonarqube:
    image: sonarqube:community
    hostname: sonarqube
    container_name: sonarqube
    depends_on:
      - postgres
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://${POSTGRES_HOSTNAME}:${POSTGRES_PORT}/sonarqube
      SONAR_JDBC_USERNAME: sonarqube
      SONAR_JDBC_PASSWORD: sonarqube
    volumes:
      - ./data/sonarqube/data:/opt/sonarqube/data
      - ./data/sonarqube/extensions:/opt/sonarqube/extensions
      - ./data/sonarqube/logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - "./data/localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./dev-config/localstack/init:/etc/localstack/init/ready.d
